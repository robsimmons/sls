// Constant identifiers
cid: extensible.

// Permeability
perm: type. #type perm transparent.
pers: perm.
aff: perm.
lin: perm.
ord: perm.

// First-order terms (Spine-form LF)
exp: type. #type exp transparent.
spine: type. #type spine transparent.

knd: exp.
typ: exp.           // LF kind
nProp: exp.         // Negative SLS kind
pProp: perm -> exp. // Positive SLS kind (per/aff/lin/ord)
pi: string -> exp -> exp -> exp.
pii: string -> exp -> exp -> exp.
arrow: exp -> exp -> exp.
var: string -> nat -> spine -> exp.
con: cid -> spine -> exp.
lam: string -> exp -> exp.

nil: spine.
app: exp -> spine -> spine.
appi: exp -> spine -> spine.


// First-order classifiers
posProp: type. #type posProp transparent.
negProp: type. #type negProp transparent.

pAtom: perm -> cid -> spine -> posProp.
down: perm -> negProp -> posProp.
one: posProp.
fuse: posProp -> posProp -> posProp.
exists: string -> exp -> posProp -> posProp.
unif: exp -> exp -> posProp.

nAtom: cid -> spine -> negProp.
lax: posProp -> negProp.
lefti: posProp -> negProp -> negProp.
righti: posProp -> negProp -> negProp.
with: negProp -> negProp -> negProp.
all: string -> exp -> negProp -> negProp.
alli: string -> exp -> negProp -> negProp.

aProp: type. #type aProp transparent.
pos: posProp -> aProp.
neg: negProp -> aProp.



// Analyzing LF expressions
wExp: exp -> world.
wSpine: spine -> world.

headClass: {E: exp} exp -> rel @ wExp E.
headClass knd knd.
headClass typ typ.
headClass nProp nProp.
headClass (pProp Perm) (pProp Perm).
headClass (pii _ _ E) Eh <- headClass E Eh.
headClass (pi  _ _ E) Eh <- headClass E Eh.
headClass (arrow _ E) Eh <- headClass E Eh.

fv: {E: exp} string -> rel @ wExp E.
fvSpine: {Sp: spine} string -> rel @ wSpine Sp.

fv (pi X T E) Y <- fv T Y.
fv (pi X T E) Y <- fv E Y, X != Y.
fv (pii X T E) Y <- fv T Y.
fv (pii X T E) Y <- fv E Y, X != Y.
fv (arrow E1 E2) Y <- fv E1 Y.
fv (arrow E1 E2) Y <- fv E2 Y.
fv (var X _ Sp) X.
fv (var X _ Sp) Y <- fvSpine Sp Y.
fv (con _ Sp) Y <- fvSpine Sp Y.
fv (lam X E) Y <- fv E Y, X != Y.
#query freevars: fv + -.

fvSpine (app E Sp) Y <- fv E Y.
fvSpine (app E Sp) Y <- fvSpine Sp Y.
fvSpine (appi E Sp) Y <- fv E Y.
fvSpine (appi E Sp) Y <- fvSpine Sp Y.
#query freevarsSpine: fvSpine + -.



// Mode analysis
mode: type. #type mode transparent.
input: mode.
output: mode.

wMode: world.
givenMode: exp -> mode -> rel @ wMode.
varMode: string -> mode -> rel @ wMode.
givenMode E M, fv E X -> varMode X M.



// Analyzing types
wPos: posProp -> world.
wNeg: negProp -> world.

fvPos: {A: posProp} string -> rel @ wPos A.
fvNeg: {A: negProp} string -> rel @ wNeg A.

fvPos (pAtom _ _ Sp) Y <- fvSpine Sp Y.
fvPos (down _ A) Y <- fvNeg A Y.
fvPos (fuse A _) Y <- fvPos A Y.
fvPos (fuse _ A) Y <- fvPos A Y.
fvPos (exists X T A) Y <- fv T Y.
fvPos (exists X T A) Y <- fvPos A Y, X != Y.
fvPos (unif T S) Y <- fv T Y.
fvPos (unif T S) Y <- fv S Y.
#query freevarsPos: fvPos + -.

fvNeg (nAtom _ Sp) Y <- fvSpine Sp Y.
fvNeg (lax A) Y <- fvPos A Y.
fvNeg (lefti A _) Y <- fvPos A Y.
fvNeg (lefti _ A) Y <- fvNeg A Y.
fvNeg (righti A _) Y <- fvPos A Y.
fvNeg (righti _ A) Y <- fvNeg A Y.
fvNeg (with A _) Y <- fvNeg A Y.
fvNeg (with _ A) Y <- fvNeg A Y.
fvNeg (all X T A) Y <- fv T Y.
fvNeg (all X T A) Y <- fvNeg A Y, X != Y.
fvNeg (alli X T A) Y <- fv T Y.
fvNeg (alli X T A) Y <- fvNeg A Y, X != Y.
#query freevarsNeg: fvNeg + -.

subPos: {A: posProp} aProp -> rel @ wPos A.
subNeg: {A: negProp} aProp -> rel @ wNeg A.

subPos A (pos A).
subPos (down _ A) C <- subNeg A C.
subPos (fuse A _) C <- subPos A C.
subPos (fuse _ A) C <- subPos A C.
subPos (exists _ _ A) C <- subPos A C.

subNeg A (neg A).
subNeg (lax A) C <- subPos A C.
subNeg (lefti A _) C <- subPos A C.
subNeg (lefti _ A) C <- subNeg A C.
subNeg (righti A _) C <- subPos A C.
subNeg (righti _ A) C <- subNeg A C.
subNeg (with A _) C <- subNeg A C.
subNeg (with _ A) C <- subNeg A C.
subNeg (all _ _ A) C <- subNeg A C.
subNeg (alli _ _ A) C <- subNeg A C.

endPos: {A: posProp} posProp -> rel @ wPos A.
endPos (pAtom P A Sp) (pAtom P A Sp).
endPos (down P A) (down P A).
endPos (fuse A _) H <- endPos A H.
endPos (fuse _ A) H <- endPos A H.
endPos (exists _ _ A) H <- endPos A H.
endPos (unif T S) (unif T S).

subgoal: {A: negProp} posProp -> rel @ wNeg A.
subgoal (lefti A B) H <- endPos A H.
subgoal (lefti A B) H <- subgoal B H.
subgoal (righti A B) H <- endPos A H.
subgoal (righti A B) H <- subgoal B H.
subgoal (with A B) H <- subgoal A H.
subgoal (with A B) H <- subgoal B H.
subgoal (all _ _ A) H <- subgoal A H.
subgoal (alli _ _ A) H <- subgoal A H.

endNeg: {A: negProp} negProp -> rel @ wNeg A.
endNeg (nAtom A Sp) (nAtom A Sp).
endNeg (lax A) (lax A).
endNeg A H -> endNeg (lefti _ A) H.
endNeg A H -> endNeg (righti _ A) H.
endNeg A H -> endNeg (with A _) H.
endNeg A H -> endNeg (with _ A) H.
endNeg A H -> endNeg (all _ _ A) H.
endNeg A H -> endNeg (alli _ _ A) H.
#query negHeads: endNeg + -.

head: type. #type head transparent.
monadic: head.
atomic: cid -> head.

headPos: {A: posProp} head -> rel @ wPos A.
headNeg: {A: negProp} head -> rel @ wNeg A.

headNeg A monadic <- endNeg A (lax _).
headNeg A (atomic P) <- endNeg A (nAtom P _).
headPos A H <- endPos A (down _ A'), headNeg A' H.



// Storing the signature
wSignat: world.
signat: cid -> exp -> exp -> rel @ wSignat.
rules: cid -> negProp -> rel @ wSignat.
#query lookup: signat + - -.
#query lookupRule: rules + -.

classify: cid -> exp -> rel @ wSignat.
classify C Eh <- signat C E _, headClass E Eh.
#query lookupClass: classify + -.



// Effects fragment calculuation

wRuleSubord: world.
ruleSubord: head -> head -> rel @ wRuleSubord.

rules C A, 
subNeg A (neg (lefti B1 B2)),
headPos B1 H1,
headNeg B2 H2
 -> ruleSubord H1 H2.

rules C A, 
subNeg A (neg (righti B1 B2)),
headPos B1 H1,
headNeg B2 H2
 -> ruleSubord H1 H2.

ruleSubord H1 H2,
ruleSubord H2 H3 
 -> ruleSubord H1 H3.

semanticEffects: rel.
weaklySemanticEffects: rel.
notSemanticEffects: rel.



// Semantic effects fragment: monadic not subordinate to anything
not (ruleSubord monadic _) -> semanticEffects.  

// Weak semantic effects fragment: monadic not subordinate to intself
ruleSubord monadic _, not (ruleSubord monadic monadic) -> weaklySemanticEffects.

// Not semantic effects: mondiac subordinate to itself
ruleSubord monadic monadic -> notSemanticEffects.
