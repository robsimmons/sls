// Constant identifiers
cid: extensible.

// Permeability
perm: type. #type perm transparent.
per: perm.
aff: perm.
lin: perm.
ord: perm.

// First-order terms (Spine-form LF)
exp: type. #type exp transparent.
spine: type. #type spine transparent.

knd: exp.
typ: exp.           // LF kind
nprop: exp.         // Negative SLS kind
pprop: perm -> exp. // Positive SLS kind (per/aff/lin/ord)
pi: string -> exp -> exp -> exp.
pii: string -> exp -> exp -> exp.
arrow: exp -> exp -> exp.
var: nat -> spine -> exp.
con: cid -> spine -> exp.
lam: string -> exp -> exp.

nil: spine.
app: exp -> spine -> spine.
appi: exp -> spine -> spine.


// First-order classifiers
posProp: type. #type posProp transparent.
negProp: type. #type negProp transparent.

atomP: cid -> spine -> posProp.
down: perm -> negProp -> posProp.
one: posProp.
fuse: posProp -> posProp -> posProp.
exists: string -> exp -> posProp.
unif: exp -> exp -> posProp.

atomN: cid -> spine -> negProp.
lax: posProp -> negProp.
righti: posProp -> negProp -> negProp.
lefti: posProp -> negProp -> negProp.
with: negProp -> negProp -> negProp.
all: string -> exp -> negProp -> negProp.
alli: string -> exp -> negProp -> negProp.
