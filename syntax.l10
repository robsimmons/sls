cid: extensible.

// Need a boolean type (make this internalized?)
bool: type. #type bool transparent.
true: bool.
false: bool.

// Permeability
perm: type. #type perm transparent.
per: perm.
aff: perm.
lin: perm.

// First-order terms (Spine-form LF)
exp: type. #type exp transparent.
spine: type. #type spine transparent.

knd: exp.
typ: exp.           // LF kind
nprop: exp.         // Negative SLS kind
pprop: perm -> exp. // Positive SLS kind
pi: string -> exp -> exp -> exp.
arrow: exp -> exp -> exp.
var: nat -> spine -> exp.
con: cid -> spine -> exp.
lam: string -> exp -> exp.

nil: spine.
app: exp -> spine -> spine.


// First-order classifiers
pos: type. #type pos transparent.
neg: type. #type neg transparent.

atomP: cid -> spine -> pos.
down: perm -> neg -> pos.
one: pos.
fuse: pos -> pos -> pos.
exists: string -> exp -> pos.
unif: exp -> exp -> pos.

atomN: cid -> spine -> neg.
lax: pos -> neg.
righti: pos -> neg -> neg.
lefti: pos -> neg -> neg.
with: neg -> neg -> neg.
all: string -> exp -> neg -> neg.
alli: string -> exp -> neg -> neg.
